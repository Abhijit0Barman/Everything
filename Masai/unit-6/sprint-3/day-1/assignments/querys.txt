// TEXT file example
1. Write a MongoDB query to find all documents in a collection.
Solution: db.restaurants.find();

2. Write a MongoDB query to display the fields restaurant_id, name, borough, and cuisine for all documents in the collection restaurant.
Solution: db.restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

3. Write a MongoDB query to display the fields restaurant_id, name, borough, and cuisine, but exclude the field _id for all documents in the collection restaurant.
Solution: db.restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 });

4. Write a MongoDB query to display all the restaurants in the borough Bronx.
Solution: db.restaurants.find({ borough: "Bronx" });

5. Write a MongoDB query to display the first 5 restaurants in the borough Bronx.
Solution: db.restaurants.find({ borough: "Bronx" }).limit(5);

6. Write a MongoDB query to display the next 5 restaurants after skipping the first 5 in the borough Bronx.
Solution: db.restaurants.find({ borough: "Bronx" }).skip(5).limit(5);

7. Write a MongoDB query to find the restaurants that achieved a score more than 90.
Solution: db.restaurants.find({ "grades.score": { $gt: 90 } });

8. Write a MongoDB query to find the restaurants that achieved a score more than 80 but less than 100.
Solution: db.restaurants.find({ "grades.score": { $gt: 80, $lt: 100 } });

9. Write a MongoDB query to find the restaurants located in latitude values less than -95.754168.
Solution: db.restaurants.find({ "address.coord.0": { $lt: -95.754168 } });

10. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American,' have a grade score more than 70, and latitude less than -65.754168.
Solution: db.restaurants.find({ cuisine: { $ne: "American " }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 } });

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American,' achieved a score more than 70, and located in longitude less than -65.754168 without using $and operator.
Solution: db.restaurants.find({ cuisine: { $ne: "American " }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 } });

12. Write a MongoDB query to find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'Wil' as the first three letters of its name.
Solution: db.restaurants.find({ name: /^Wil/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

13. Write a MongoDB query to find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'ces' as the last three letters of its name.
Solution: db.restaurants.find({ name: /ces$/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

14. Write a MongoDB query to find the restaurant Id, name, borough, and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
Solution: db.restaurants.find({ name: /Reg/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

15. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all columns.
Solution: db.restaurants.find().sort({ name: 1 });

16. Write a MongoDB query to arrange the name of the cuisine in ascending order, and for the same cuisine, borough should be in descending order.
Solution: db.restaurants.find().sort({ cuisine: 1, borough: -1 });

Hint: Explore $or, $and, $lt, $lte, $gt, $gte, $set, $sort, $regex
